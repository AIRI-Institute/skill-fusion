FROM nvidia/cudagl:11.3.0-devel-ubuntu20.04
###########################################
# miniconda
# integrated from https://github.com/ContinuumIO/docker-images/tree/master/miniconda3
###########################################
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV DEBIAN_FRONTEND noninteractive
RUN rm -rf /etc/apt/sources.list.d/nvidia-ml.list && \
    rm -rf /etc/apt/sources.list.d/cuda.list
RUN sed -i '/developer\.download\.nvidia\.com\/compute\/cuda\/repos/d' /etc/apt/sources.list
RUN apt-key del 7fa2af80
RUN apt-get update && \
    apt-get install -y software-properties-common wget
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb
RUN dpkg -i cuda-keyring_1.0-1_all.deb
RUN apt-get update && rm -rf /var/lib/apt/lists/* && \
    add-apt-repository multiverse && \
    add-apt-repository ppa:graphics-drivers && \
    apt-get update 
    #&& \
    #apt-get install -y nvidia-cuda-toolkit
#RUN apt-get update && apt-get install -y apt-utils
#RUN apt-get update
#RUN apt-get update && apt-get install -y cuda-toolkit-11.3
#RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin
#RUN mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600
#RUN wget https://developer.download.nvidia.com/compute/cuda/11.3.0/local_installers/cuda-repo-ubuntu2004-11-3-local_11.3.0-465.19.01-1_amd64.deb
#RUN dpkg -i cuda-repo-ubuntu2004-11-3-local_11.3.0-465.19.01-1_amd64.deb
#RUN apt-key add /var/cuda-repo-ubuntu2004-11-3-local/7fa2af80.pub
#RUN apt-get update && apt-get -y cuda-toolkit-11.3
#RUN apt-get install libcudnn8_8.2.0.53-1+cuda11.3_amd64.deb
#RUN apt-get install libcudnn8-dev_8.2.0.53-1+cuda11.3_amd64.deb
RUN apt-get update --fix-missing && \
    apt-get install -y wget bzip2 ca-certificates curl git python&& \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates curl wget less sudo lsof git net-tools nano psmisc xz-utils nemo vim net-tools iputils-ping traceroute htop \
    chromium-browser xterm terminator zenity make cmake gcc libc6-dev \
    x11-xkb-utils xauth xfonts-base xkb-data \
    mesa-utils xvfb libgl1-mesa-dri libgl1-mesa-glx libglib2.0-0 libxext6 libsm6 libxrender1 \
    libglu1 libglu1:i386 libxv1 libxv1:i386 \
    libsuitesparse-dev libgtest-dev \
    libeigen3-dev libsdl1.2-dev libarmadillo-dev libsdl-image1.2-dev libsdl-dev \
    software-properties-common supervisor vim-tiny dbus-x11 x11-utils alsa-utils \
    lxde x11vnc gtk2-engines-murrine gnome-themes-standard gtk2-engines-pixbuf gtk2-engines-murrine\
    firefox libxmu-dev \
    libssl-dev:i386 libxext-dev x11proto-gl-dev \
    ninja-build meson autoconf libtool \
    zlib1g-dev libjpeg-dev ffmpeg xorg-dev python-opengl python3-opengl libsdl2-dev swig \
    libglew-dev libboost-dev libboost-thread-dev libboost-filesystem-dev libpython2.7-dev \
    && apt-get clean && rm -rf /var/lib/apt/lists/*
RUN add-apt-repository ppa:ubuntu-toolchain-r/test
RUN apt update
RUN apt install -y gcc-9 g++-9
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-9  
RUN dpkg --add-architecture i386
RUN apt-get update   
RUN apt install -y libprotobuf-dev protobuf-compiler build-essential libssl-dev  
RUN /bin/bash -c '. cd /; wget https://github.com/Kitware/CMake/releases/download/v3.21.3/cmake-3.21.3.tar.gz; tar -zxvf cmake-3.21.3.tar.gz; \
cd cmake-3.21.3; ./bootstrap; make; sudo make install'
RUN cmake --version    
ENV PATH /opt/conda/bin:$PATH                     
RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-py38_4.9.2-Linux-x86_64.sh -O ~/miniconda.sh && \
    /bin/bash ~/miniconda.sh -b -p /opt/conda && \
    rm ~/miniconda.sh && \
    /opt/conda/bin/conda install numpy pyyaml scipy mkl mkl-include &&\
    /opt/conda/bin/conda clean -tip && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc  
###########################################
# X11 VNC XVFB
# integrated from https://github.com/fcwu/docker-ubuntu-vnc-desktop
###########################################
# taken from https://github.com/fcwu/docker-ubuntu-vnc-desktop
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        software-properties-common \
        curl wget \
        supervisor \
        sudo \
        vim-tiny \
        net-tools \ 
        xz-utils \
        dbus-x11 x11-utils alsa-utils \
        mesa-utils libgl1-mesa-dri \
        lxde x11vnc xvfb \
        gtk2-engines-murrine gnome-themes-standard gtk2-engines-pixbuf gtk2-engines-murrine \
        firefox \
    && apt-get autoclean \
    && apt-get autoremove \
    && rm -rf /var/lib/apt/lists/*
# tini for subreap                                   
ARG TINI_VERSION=v0.9.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /bin/tini
RUN chmod +x /bin/tini
# set default screen to 1 (this is crucial for gym's rendering)
ENV DISPLAY=:1
RUN apt-get update && apt-get install -y \
        git vim \
        python-numpy python-dev cmake zlib1g-dev libjpeg-dev xvfb ffmpeg xorg-dev python-opengl libboost-all-dev libsdl2-dev swig \
    && rm -rf /var/lib/apt/lists/*
# install gym
RUN cd /opt \
    && git clone https://github.com/openai/gym.git \
    && cd /opt/gym \
    && pip install -e '.[box2d]' \
    && rm -rf ~/.cache/pip 
WORKDIR /
RUN apt-get update
RUN apt-cache policy libnvinfer-dev
#RUN os="ubuntu1804"; tag="cudax.x-trt8.x.x.x-ga-yyyymmdd"; nv-tensorrt-repo-${os}-${tag}_1-1_amd64.deb
#COPY requirements/nv-tensorrt-repo-ubuntu1804-cuda11.6-trt8.4.0.6-ea-20220212_1-1_amd64.deb /tensorrt.deb
#RUN dpkg -i tensorrt.deb
#RUN apt-key add /var/nv-tensorrt-repo-ubuntu1804-cuda11.6-trt8.4.0.6-ea-20220212/*.pub
RUN apt-get update
#RUN apt-get install -y tensorrt
#RUN version="7.2.3-1+cuda11.1" && apt-get install -y  libcudnn8="8.0.5.39-1+cuda11.1" libcudnn8-dev="8.0.5.39-1+cuda11.1"  \
#            libnvinfer7=${version} libnvonnxparsers7=${version} libnvparsers7=${version} \
#            libnvinfer-plugin7=${version} libnvinfer-dev=${version} libnvonnxparsers-dev=${version} \
#            libnvparsers-dev=${version} libnvinfer-plugin-dev=${version} python-libnvinfer=${version} python3-libnvinfer=${version} 
RUN cmake --version
RUN conda install -c conda-forge cmake
RUN conda create -n habitat python=3.8 cmake=3.19.6
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV PATH /opt/conda/envs/habitat/bin:$PATH  
ENV PYTHONPATH=/opt/conda/envs/habitat/bin/python3  
RUN /bin/bash -c ". activate habitat; pip install numpy ipython jupyterlab prompt-toolkit"
 
WORKDIR /root
RUN apt-get install -y \
#         libqt4-dev \
#         qt4-dev-tools \ 
         libglew-dev \ 
         glew-utils \ 
         libgstreamer1.0-dev \ 
         libgstreamer-plugins-base1.0-dev \ 
         libglib2.0-dev
#Fix locale (UTF8) issue https://askubuntu.com/questions/162391/how-do-i-fix-my-locale-issue
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y locales
RUN locale-gen "en_US.UTF-8"
RUN pip install imageio
WORKDIR /
# Conda environment
RUN git clone https://github.com/SHI-Labs/OneFormer.git
RUN conda install pytorch==1.10.1 torchvision==0.11.2 cudatoolkit=11.3 -c pytorch -c conda-forge
RUN pip3 install -U opencv-python
RUN pip install 'git+https://github.com/facebookresearch/fvcore'
# install detectron2
#RUN git clone https://github.com/facebookresearch/detectron2 detectron2_repo
#WORKDIR /detectron2_repo
#RUN git reset --hard 9eb4831f742ae6a13b8edb61d07b619392fb6543
# Install detectron2
RUN python -m pip install detectron2 -f \
  https://dl.fbaipublicfiles.com/detectron2/wheels/cu113/torch1.10/index.html
WORKDIR /
# set FORCE_CUDA because during `docker build` cuda is not accessible
ENV FORCE_CUDA="1"
# This will by default build detectron2 for all common cuda architectures and take a lot more time,
# because inside `docker build`, there is no way to tell which architecture will be used.
ARG TORCH_CUDA_ARCH_LIST="Kepler;Kepler+Tesla;Maxwell;Maxwell+Tegra;Pascal;Volta;Turing"
ENV TORCH_CUDA_ARCH_LIST="${TORCH_CUDA_ARCH_LIST}"
#RUN pip install -e detectron2_repo
RUN git clone https://github.com/aim-uofa/AdelaiDet.git AdelaiDet
RUN ls
WORKDIR /AdelaiDet
#RUN python setup.py build develop
WORKDIR /
RUN /bin/bash -c 'wget -qO - http://packages.lunarg.com/lunarg-signing-key-pub.asc | apt-key add -'
#RUN /bin/bash -c 'wget -qO /etc/apt/sources.list.d/lunarg-vulkan-bionic.list http://packages.lunarg.com/vulkan/lunarg-vulkan-bionic.list'
RUN apt install -y libxcb-dri3-0 libxcb-present0 libpciaccess0 \
libpng-dev libxcb-keysyms1-dev libxcb-dri3-dev libx11-dev g++-multilib \
libmirclient-dev libwayland-dev libxrandr-dev libxcb-randr0-dev libxcb-ewmh-dev \
bison libx11-xcb-dev liblz4-dev libzstd-dev libdwarf-dev
RUN /bin/bash -c 'apt update'
RUN git clone https://github.com/KhronosGroup/SPIRV-Tools.git; cd SPIRV-Tools; \
    git clone https://github.com/KhronosGroup/SPIRV-Headers.git external/spirv-headers; \
    git clone https://github.com/google/effcee.git external/effcee; \
    git clone https://github.com/google/re2.git external/re2; \
    git clone https://github.com/google/googletest.git external/googletest; \
    mkdir build && cd build; \
    cmake /SPIRV-Tools;
RUN apt list -a lunarg-vktrace
COPY nvidia_icd.json /etc/vulkan/icd.d/nvidia_icd.json
RUN wget -qO - http://packages.lunarg.com/lunarg-signing-key-pub.asc | apt-key add - && \
    wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.2.170-bionic.list http://packages.lunarg.com/vulkan/1.2.170/lunarg-vulkan-1.2.170-bionic.list && \
    apt update && apt install -y vulkan-sdk && apt upgrade -y && apt autoremove -y   
RUN apt-get update
RUN apt-get upgrade     
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-9
#RUN /bin/bash -c 'git clone --recursive https://github.com/shacklettbp/bps3D; \
#cd bps3D; \
#mkdir build; \
#cd build; \
#cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; \
#make' 
#add_definitions(-D GLM_ENABLE_EXPERIMENTAL)
#RUN /bin/bash -c 'git clone --recursive https://github.com/shacklettbp/bps-nav.git; \
#cd bps-nav; \
#cd simulator/python/bps_sim; \
#pip install -e . # Build simulator; \
#cd ../bps_pytorch; \
#pip install -e . # Build pytorch integration; \
#cd ../../../; \
#pip install -e .'
RUN apt-get update
# Setup habitat-sim
RUN git clone --branch challenge-2022-branch https://github.com/facebookresearch/habitat-sim.git
RUN /bin/bash -c ". activate habitat; cd habitat-sim; pip install -r requirements.txt; python setup.py install --headless --with-cuda  --build-datatool"
# Install challenge specific habitat-lab
RUN git clone --branch challenge-2022-branch https://github.com/facebookresearch/habitat-lab.git
RUN /bin/bash -c ". activate habitat; cd habitat-lab; pip install -e ."
RUN pip install matplotlib
RUN pip install tqdm
RUN pip install tabulate
RUN pip install pandas
RUN pip install scikit-fmm
RUN pip install scikit-image
RUN pip install --no-cache-dir Cython
RUN pip install keyboard
RUN pip install seaborn
RUN pip install ifcfg
RUN pip install imgaug
RUN pip install pycocotools
RUN pip install keras
RUN pip install easydict
RUN pip install pyquaternion
RUN pip install ipywidgets
RUN pip install wandb
RUN pip install lmdb
RUN pip install transformations
RUN pip install sklearn
RUN pip install h5py
# Install other dependencies
RUN pip3 install git+https://github.com/cocodataset/panopticapi.git
RUN pip3 install git+https://github.com/mcordts/cityscapesScripts.git
RUN cd OneFormer && pip3 install -r requirements.txt
#RUN /bin/bash -c ". activate habitat; conda install jupyter jupyterlab prompt-toolkit"
# vnc port
#EXPOSE 5900
# jupyterlab port
EXPOSE 8888
# tensorboard (if any)
EXPOSE 6006
# startup
COPY image /
#COPY habitat-challenge-data /data_config
ENV HOME /
ENV SHELL /bin/bash
# no password and token for jupyter
ENV JUPYTER_PASSWORD "longpasswordforjupytertostopviruses"
ENV JUPYTER_TOKEN "longpasswordforjupytertostopviruses_jupytertokin"
RUN chmod 777 /startup.sh
RUN chmod 777 /usr/local/bin/jupyter.sh
RUN chmod 777 /usr/local/bin/xvfb.sh
WORKDIR /
# services like lxde, xvfb, x11vnc, jupyterlab will be started
ENTRYPOINT ["/startup.sh"]

